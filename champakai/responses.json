{
  "if else": {
    "keywords": ["if", "if else", "if-else", "decision", "conditional"],
    "response": "âœ… IF-ELSE IN C:\n\nðŸ‘‰ Explanation:\nDecision-making block. Executes code based on condition.\n\nðŸ‘‰ Syntax:\n```c\nif(condition) {\n  // true\n} else {\n  // false\n}\n```\n\nðŸ‘‰ Example:\n```c\nint age=20;\nif(age>=18) printf(\"Adult\");\nelse printf(\"Minor\");\n```\n\nðŸ‘‰ To-Do:\n- Check even/odd\n- Check positive/negative"
  },

  "ternary": {
    "keywords": ["ternary", "conditional operator", "short if"],
    "response": "âœ… TERNARY OPERATOR:\n\nðŸ‘‰ Syntax:\n```c\n(condition) ? true_result : false_result;\n```\n\nðŸ‘‰ Example:\n```c\nint num=5;\nprintf(\"%s\", (num%2==0)?\"Even\":\"Odd\");\n```\n\nðŸ‘‰ To-Do:\n- Greater of two numbers\n- Pass/Fail check"
  },

  "switch": {
    "keywords": ["switch", "case", "multiple choice", "multi-way decision"],
    "response": "âœ… SWITCH CASE:\n\nðŸ‘‰ Example:\n```c\nint day=3;\nswitch(day){\n case 1: printf(\"Monday\"); break;\n case 2: printf(\"Tuesday\"); break;\n default: printf(\"Other day\");\n}\n```\n\nðŸ‘‰ To-Do:\n- Day display\n- Simple calculator"
  },

  "for loop": {
    "keywords": ["for", "for loop", "loops"],
    "response": "âœ… FOR LOOP:\n\nðŸ‘‰ Example:\n```c\nfor(int i=1;i<=5;i++) printf(\"%d \",i);\n```\n\nðŸ‘‰ To-Do:\n- Print 1 to 10\n- Factorial"
  },

  "while loop": {
    "keywords": ["while", "while loop"],
    "response": "âœ… WHILE LOOP:\n\nðŸ‘‰ Example:\n```c\nint i=1;\nwhile(i<=5){\n printf(\"%d \",i);\n i++;\n}\n```\n\nðŸ‘‰ To-Do:\n- Sum till 10\n- Display even numbers"
  },

  "do while loop": {
    "keywords": ["do while", "do-while", "exit controlled loop"],
    "response": "âœ… DO-WHILE:\n\nðŸ‘‰ Example:\n```c\nint i=1;\ndo{\n printf(\"%d \",i);\n i++;\n}while(i<=5);\n```\n\nðŸ‘‰ To-Do:\n- Display menu repeatedly\n- Print numbers"
  },

  "arrays": {
    "keywords": ["array", "arrays"],
    "response": "âœ… ARRAYS:\n\nðŸ‘‰ Example:\n```c\nint a[5] = {1,2,3,4,5};\n```\n\nðŸ‘‰ To-Do:\n- Sum of elements\n- Largest element"
  },

  "strings": {
    "keywords": ["string", "strings"],
    "response": "âœ… STRINGS:\n\nðŸ‘‰ Example:\n```c\nchar name[10] = \"Champak\";\nprintf(\"%s\",name);\n```\n\nðŸ‘‰ To-Do:\n- Count vowels\n- String length"
  },

  "pointers": {
    "keywords": ["pointer", "pointers", "address", "dereference"],
    "response": "âœ… POINTERS:\n\nðŸ‘‰ Example:\n```c\nint x=10;\nint *p=&x;\nprintf(\"%d\",*p);\n```\n\nðŸ‘‰ To-Do:\n- Swap numbers using pointers\n- Print address of variables"
  },

  "functions": {
    "keywords": ["function", "functions"],
    "response": "âœ… FUNCTIONS:\n\nðŸ‘‰ Example:\n```c\nint add(int a,int b){\n return a+b;\n}\n```\n\nðŸ‘‰ To-Do:\n- Factorial function\n- GCD using function"
  },

  "recursion": {
    "keywords": ["recursion", "recursive", "function calling itself"],
    "response": "âœ… RECURSION:\n\nðŸ‘‰ Example:\n```c\nint fact(int n){\n if(n==0)return 1;\n return n*fact(n-1);\n}\n```\n\nðŸ‘‰ To-Do:\n- Factorial\n- Fibonacci"
  },

  "structures": {
    "keywords": ["structure", "structures", "struct"],
    "response": "âœ… STRUCTURES:\n\nðŸ‘‰ Example:\n```c\nstruct Student{\n char name[20];\n int age;\n};\n```\n\nðŸ‘‰ To-Do:\n- Create Employee struct\n- Store student details"
  },

  "union": {
    "keywords": ["union", "unions"],
    "response": "âœ… UNIONS:\n\nðŸ‘‰ Example:\n```c\nunion Data{\n int i;\n float f;\n};\n```\n\nðŸ‘‰ To-Do:\n- Demonstrate memory sharing\n- Define union for employee"
  },

  "file handling": {
    "keywords": ["file", "file handling", "files", "fopen", "fclose"],
    "response": "âœ… FILE HANDLING:\n\nðŸ‘‰ Example:\n```c\nFILE *fp;\nfp=fopen(\"file.txt\",\"w\");\nfprintf(fp,\"Hello\");\nfclose(fp);\n```\n\nðŸ‘‰ To-Do:\n- Write data to file\n- Read from file"
  },

  "macros": {
    "keywords": ["macro", "macros", "define"],
    "response": "âœ… MACROS:\n\nðŸ‘‰ Example:\n```c\n#define PI 3.14\n```\n\nðŸ‘‰ To-Do:\n- Create macros for square\n- Max of two numbers macro"
  },

  "typedef": {
    "keywords": ["typedef", "type alias"],
    "response": "âœ… TYPEDEF:\n\nðŸ‘‰ Example:\n```c\ntypedef unsigned int uint;\nuint x=5;\n```\n\nðŸ‘‰ To-Do:\n- Typedef for structure\n- Alias int as myInt"
  },

  "dynamic memory allocation": {
    "keywords": ["malloc", "calloc", "realloc", "free", "dynamic memory"],
    "response": "âœ… DYNAMIC MEMORY ALLOCATION:\n\nðŸ‘‰ Example:\n```c\nint *p=(int*)malloc(5*sizeof(int));\n```\n\nðŸ‘‰ To-Do:\n- Allocate array dynamically\n- Free memory after use"
  },

  "storage classes": {
    "keywords": ["storage class", "auto", "static", "register", "extern"],
    "response": "âœ… STORAGE CLASSES:\n\nðŸ‘‰ Types:\n- auto\n- static\n- extern\n- register\n\nðŸ‘‰ Example:\n```c\nstatic int count=0;\n```"
  },

  "preprocessor": {
    "keywords": ["preprocessor", "preprocessor directives", "#define", "#include", "#ifdef"],
    "response": "âœ… PREPROCESSOR DIRECTIVES:\n\nðŸ‘‰ Examples:\n```c\n#include<stdio.h>\n#define PI 3.14\n```"
  },

  "header files": {
    "keywords": ["header", "header files", "tags", "include files"],
    "response": "âœ… HEADER FILES:\n\nðŸ‘‰ Examples:\n- stdio.h\n- conio.h\n- string.h\n- math.h\n- stdlib.h\n\nðŸ‘‰ Example:\n```c\n#include<stdio.h>\n```"
  },

  "operators": {
    "keywords": ["operators", "arithmetic", "relational", "logical", "bitwise", "assignment"],
    "response": "âœ… OPERATORS IN C:\n\nðŸ‘‰ Types:\n- Arithmetic (+,-,*,/,%)\n- Relational (==, !=, >, <)\n- Logical (&&, ||, !)\n- Bitwise (&,|,^,~)\n- Assignment (=, +=, -=)\n\nðŸ‘‰ Example:\n```c\nint a=10, b=20;\nprintf(\"%d\", a+b);\n```"
  },

  "default": {
    "keywords": [],
    "response": "Sorry Champak! I don't have that topic yet. Try keywords like: loops, arrays, strings, pointers, recursion, macros, storage classes, etc."
  }
}
