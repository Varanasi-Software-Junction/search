{
  "arithmetic operators": "âœ… ARITHMETIC OPERATORS IN C:\n\nðŸ‘‰ Used for mathematical operations.\n\nðŸ‘‰ Operators:\n+ (Addition)\n- (Subtraction)\n* (Multiplication)\n/ (Division)\n% (Modulus)\n\nðŸ‘‰ Example:\n```c\nint a = 10, b = 3;\nprintf(\"Sum: %d\", a + b);\n```",

  "relational operators": "âœ… RELATIONAL OPERATORS:\n\nðŸ‘‰ Used for comparing values.\n\nðŸ‘‰ Operators:\n> Greater than\n< Less than\n>= Greater than or equal to\n<= Less than or equal to\n== Equal to\n!= Not equal to\n\nðŸ‘‰ Example:\n```c\nint x=5, y=10;\nif(x < y) printf(\"x is smaller\");\n```",

  "logical operators": "âœ… LOGICAL OPERATORS:\n\nðŸ‘‰ Used for combining conditions.\n\nðŸ‘‰ Operators:\n&& Logical AND\n|| Logical OR\n! Logical NOT\n\nðŸ‘‰ Example:\n```c\nint a=5, b=10;\nif(a>0 && b>0) printf(\"Both positive\");\n```",

  "bitwise operators": "âœ… BITWISE OPERATORS:\n\nðŸ‘‰ Used for bit-level operations.\n\nðŸ‘‰ Operators:\n& AND\n| OR\n^ XOR\n~ NOT\n<< Left Shift\n>> Right Shift\n\nðŸ‘‰ Example:\n```c\nint a=5, b=3;\nprintf(\"%d\", a & b);\n```",

  "assignment operators": "âœ… ASSIGNMENT OPERATORS:\n\nðŸ‘‰ Used to assign values.\n\nðŸ‘‰ Operators:\n= Assignment\n+= Add and assign\n-= Subtract and assign\n*= Multiply and assign\n/= Divide and assign\n%= Modulus and assign\n\nðŸ‘‰ Example:\n```c\nint x=10;\nx += 5;\nprintf(\"%d\", x);\n```",

  "data types": "âœ… DATA TYPES IN C:\n\nðŸ‘‰ Categories:\n- int\n- float\n- double\n- char\n\nðŸ‘‰ Example:\n```c\nint age = 25;\nfloat price = 99.5;\nchar grade = 'A';\n```",

  "header files": "âœ… HEADER FILES (TAGS) IN C:\n\nðŸ‘‰ Provide built-in functions.\n\nðŸ‘‰ Common headers:\n<stdio.h> - Input/Output\n<conio.h> - Console I/O (non-standard)\n<math.h> - Math functions\n<string.h> - String handling\n<stdlib.h> - Memory and utility\n\nðŸ‘‰ Example:\n```c\n#include<stdio.h>\n#include<string.h>\n```",

  "preprocessor directives": "âœ… PREPROCESSOR DIRECTIVES:\n\nðŸ‘‰ Instructions for compiler before compilation.\n\nðŸ‘‰ Examples:\n```c\n#include<stdio.h>\n#define PI 3.14\n```",

  "storage classes": "âœ… STORAGE CLASSES:\n\nðŸ‘‰ Types:\n- auto\n- static\n- extern\n- register\n\nðŸ‘‰ Example:\n```c\nstatic int count = 0;\n```",

  "typedef": "âœ… TYPEDEF:\n\nðŸ‘‰ Used to create alias for data types.\n\nðŸ‘‰ Example:\n```c\ntypedef unsigned int uint;\nuint age = 25;\n```",

  "macros": "âœ… MACROS:\n\nðŸ‘‰ Preprocessor constant definitions.\n\nðŸ‘‰ Example:\n```c\n#define PI 3.1416\n```",

  "dynamic memory allocation": "âœ… DYNAMIC MEMORY ALLOCATION:\n\nðŸ‘‰ Allocating memory at runtime.\n\nðŸ‘‰ Functions:\n- malloc()\n- calloc()\n- realloc()\n- free()\n\nðŸ‘‰ Example:\n```c\nint *p = (int*) malloc(sizeof(int) * 5);\n```",

  "union": "âœ… UNIONS:\n\nðŸ‘‰ Similar to structures but memory is shared.\n\nðŸ‘‰ Example:\n```c\nunion Data {\n  int i;\n  float f;\n};\n```",

  "structure": "âœ… STRUCTURES:\n\nðŸ‘‰ Grouping variables of different types.\n\nðŸ‘‰ Example:\n```c\nstruct Student {\n  char name[50];\n  int age;\n};\n```",

  "recursion": "âœ… RECURSION:\n\nðŸ‘‰ A function calling itself.\n\nðŸ‘‰ Example:\n```c\nint fact(int n) {\n  if(n==0) return 1;\n  return n * fact(n-1);\n}\n```",

  "arrays": "âœ… ARRAYS:\n\nðŸ‘‰ Collection of similar data type elements.\n\nðŸ‘‰ Example:\n```c\nint marks[5] = {90, 80, 70, 60, 50};\n```",

  "functions": "âœ… FUNCTIONS:\n\nðŸ‘‰ Reusable block of code.\n\nðŸ‘‰ Example:\n```c\nint add(int a, int b) {\n  return a + b;\n}\n```",

  "strings": "âœ… STRINGS:\n\nðŸ‘‰ Array of characters ending with '\\0'.\n\nðŸ‘‰ Example:\n```c\nchar name[20] = \"Champak\";\n```",

  "pointers": "âœ… POINTERS:\n\nðŸ‘‰ Store address of variables.\n\nðŸ‘‰ Example:\n```c\nint x = 10;\nint *p = &x;\nprintf(\"%d\", *p);\n```",

  "file handling": "âœ… FILE HANDLING:\n\nðŸ‘‰ Reading/writing files.\n\nðŸ‘‰ Example:\n```c\nFILE *fp;\nfp = fopen(\"data.txt\", \"w\");\nfprintf(fp, \"Hello\");\nfclose(fp);\n```",

  "loops": "âœ… LOOPS IN C:\n\nðŸ‘‰ Types:\n- for loop\n- while loop\n- do while loop\n\nðŸ‘‰ Example:\n```c\nfor(int i=1;i<=5;i++) printf(\"%d \",i);\n```",

  "decision making": "âœ… DECISION MAKING:\n\nðŸ‘‰ Types:\n- if\n- if-else\n- nested if\n- switch\n- ternary\n\nðŸ‘‰ Example:\n```c\nif(score > 50) printf(\"Pass\");\n```",

  "default": "Sorry Champak! I don't know that. Try asking about: operators, loops, functions, arrays, strings, pointers, file handling, structures, typedef, macros, recursion, unions, dynamic memory allocation or any other C topic."
}
